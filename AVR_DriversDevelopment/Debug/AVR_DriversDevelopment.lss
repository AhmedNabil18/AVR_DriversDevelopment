
AVR_DriversDevelopment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000efa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00000efa  00000f8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000114  008000c2  008000c2  00000ff0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001020  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000310  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000274f  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001143  00000000  00000000  00003abb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018ca  00000000  00000000  00004bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000095c  00000000  00000000  000064c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013c7  00000000  00000000  00006e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e28  00000000  00000000  000081eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000a013  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__vector_4>
  14:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__vector_5>
  18:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__vector_6>
  1c:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__vector_7>
  20:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__vector_8>
  24:	0c 94 75 05 	jmp	0xaea	; 0xaea <__vector_9>
  28:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__vector_10>
  2c:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__vector_11>
  30:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__vector_12>
  34:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__vector_13>
  38:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__vector_14>
  3c:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3c       	cpi	r26, 0xC2	; 194
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 ec       	ldi	r26, 0xC2	; 194
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3d       	cpi	r26, 0xD6	; 214
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 13 02 	call	0x426	; 0x426 <main>
  8a:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Keypad_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is already initialized */
	if (genu_KeypadModuleState == KEYPAD_STATUS_INIT)
  92:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  96:	85 30       	cpi	r24, 0x05	; 5
  98:	71 f0       	breq	.+28     	; 0xb6 <Keypad_init+0x24>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
  9a:	86 e7       	ldi	r24, 0x76	; 118
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	11 f0       	breq	.+4      	; 0xaa <Keypad_init+0x18>
  a6:	87 30       	cpi	r24, 0x07	; 7
  a8:	29 f4       	brne	.+10     	; 0xb4 <Keypad_init+0x22>
		return KEYPAD_STATUS_ERROR_NOK;
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
  aa:	85 e0       	ldi	r24, 0x05	; 5
  ac:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	return KEYPAD_STATUS_ERROR_OK;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return KEYPAD_STATUS_ERROR_NOK;
  b4:	80 e0       	ldi	r24, 0x00	; 0
		
	/* Change the state of the Keypad module to Initialized */
	genu_KeypadModuleState = KEYPAD_STATUS_INIT;
	return KEYPAD_STATUS_ERROR_OK;
}
  b6:	08 95       	ret

000000b8 <Keypad_readKey>:
* Parameters (out): pu8_pressedKey - Pointer to a Char to hold the pressed key.
* Return value: enuKeypad_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Read the current pressed Key.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuKeypad_Status_t Keypad_readKey(uint8_t * pu8_pressedKey)
{
  b8:	af 92       	push	r10
  ba:	bf 92       	push	r11
  bc:	cf 92       	push	r12
  be:	df 92       	push	r13
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	1f 92       	push	r1
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	7c 01       	movw	r14, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
  d4:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d8:	95 30       	cpi	r25, 0x05	; 5
  da:	09 f0       	breq	.+2      	; 0xde <Keypad_readKey+0x26>
  dc:	50 c0       	rjmp	.+160    	; 0x17e <Keypad_readKey+0xc6>
	{
		return KEYPAD_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
  de:	e1 14       	cp	r14, r1
  e0:	f1 04       	cpc	r15, r1
  e2:	09 f4       	brne	.+2      	; 0xe6 <Keypad_readKey+0x2e>
  e4:	4e c0       	rjmp	.+156    	; 0x182 <Keypad_readKey+0xca>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	89 83       	std	Y+1, r24	; 0x01
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
  ea:	00 e0       	ldi	r16, 0x00	; 0
  ec:	43 c0       	rjmp	.+134    	; 0x174 <Keypad_readKey+0xbc>
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
  ee:	a0 2e       	mov	r10, r16
  f0:	b1 2c       	mov	r11, r1
  f2:	f5 01       	movw	r30, r10
  f4:	ef 58       	subi	r30, 0x8F	; 143
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_writePin>
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	09 f0       	breq	.+2      	; 0x106 <Keypad_readKey+0x4e>
 104:	40 c0       	rjmp	.+128    	; 0x186 <Keypad_readKey+0xce>
 106:	10 e0       	ldi	r17, 0x00	; 0
 108:	29 c0       	rjmp	.+82     	; 0x15c <Keypad_readKey+0xa4>
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
 10a:	c1 2e       	mov	r12, r17
 10c:	d1 2c       	mov	r13, r1
 10e:	f6 01       	movw	r30, r12
 110:	e3 59       	subi	r30, 0x93	; 147
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	be 01       	movw	r22, r28
 116:	6f 5f       	subi	r22, 0xFF	; 255
 118:	7f 4f       	sbci	r23, 0xFF	; 255
 11a:	80 81       	ld	r24, Z
 11c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Dio_readPin>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	99 f5       	brne	.+102    	; 0x18a <Keypad_readKey+0xd2>
				return KEYPAD_STATUS_ERROR_NOK;
			if(u8_pinValue == PIN_LOW)
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	81 11       	cpse	r24, r1
 128:	18 c0       	rjmp	.+48     	; 0x15a <Keypad_readKey+0xa2>
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	f5 01       	movw	r30, r10
 12e:	ef 58       	subi	r30, 0x8F	; 143
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	80 81       	ld	r24, Z
 134:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_writePin>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	49 f5       	brne	.+82     	; 0x18e <Keypad_readKey+0xd6>
					return KEYPAD_STATUS_ERROR_NOK;
				*pu8_pressedKey = gau8_ButtonSymbols[u8_RowIndex][u8_ColumnIndex];
 13c:	c6 01       	movw	r24, r12
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	8c 0d       	add	r24, r12
 144:	9d 1d       	adc	r25, r13
 146:	8f 59       	subi	r24, 0x9F	; 159
 148:	9f 4f       	sbci	r25, 0xFF	; 255
 14a:	fc 01       	movw	r30, r24
 14c:	ea 0d       	add	r30, r10
 14e:	fb 1d       	adc	r31, r11
 150:	80 81       	ld	r24, Z
 152:	f7 01       	movw	r30, r14
 154:	80 83       	st	Z, r24
				return KEYPAD_STATUS_PRESSED;
 156:	86 e0       	ldi	r24, 0x06	; 6
 158:	1d c0       	rjmp	.+58     	; 0x194 <Keypad_readKey+0xdc>
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
 15a:	1f 5f       	subi	r17, 0xFF	; 255
 15c:	14 30       	cpi	r17, 0x04	; 4
 15e:	a8 f2       	brcs	.-86     	; 0x10a <Keypad_readKey+0x52>
				return KEYPAD_STATUS_PRESSED;
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
 160:	f5 01       	movw	r30, r10
 162:	ef 58       	subi	r30, 0x8F	; 143
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	80 81       	ld	r24, Z
 16a:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_writePin>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	81 f4       	brne	.+32     	; 0x192 <Keypad_readKey+0xda>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	uint8_t u8_ColumnIndex=0, u8_RowIndex=0;
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
 172:	0f 5f       	subi	r16, 0xFF	; 255
 174:	03 30       	cpi	r16, 0x03	; 3
 176:	08 f4       	brcc	.+2      	; 0x17a <Keypad_readKey+0xc2>
 178:	ba cf       	rjmp	.-140    	; 0xee <Keypad_readKey+0x36>
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
 17a:	87 e0       	ldi	r24, 0x07	; 7
 17c:	0b c0       	rjmp	.+22     	; 0x194 <Keypad_readKey+0xdc>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Keypad module is not initialized */
	if (genu_KeypadModuleState != KEYPAD_STATUS_INIT)
	{
		return KEYPAD_STATUS_NOT_INIT;
 17e:	84 e0       	ldi	r24, 0x04	; 4
 180:	09 c0       	rjmp	.+18     	; 0x194 <Keypad_readKey+0xdc>
	}else{/*Nothing to here*/}
	/* Check if the pointer input is NULL */
	if (pu8_pressedKey == NULL_PTR)
	{
		return KEYPAD_STATUS_ERROR_NULL;
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	07 c0       	rjmp	.+14     	; 0x194 <Keypad_readKey+0xdc>
	uint8_t u8_pinValue = PIN_HIGH;
	for(u8_ColumnIndex=0; u8_ColumnIndex<KEYPAD_COLUMNS_NUM; u8_ColumnIndex++)
	{
		/* Put Zero Logic on each column pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_LOW) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	05 c0       	rjmp	.+10     	; 0x194 <Keypad_readKey+0xdc>
			
		/* Loop on the Rows to find if any pin is held Low (Pressed) */
		for(u8_RowIndex=0; u8_RowIndex<KEYPAD_ROWS_NUM; u8_RowIndex++)
		{
			if(Dio_readPin(gau8_Rows[u8_RowIndex], &u8_pinValue) != DIO_STATUS_ERROR_OK)
				return KEYPAD_STATUS_ERROR_NOK;
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	03 c0       	rjmp	.+6      	; 0x194 <Keypad_readKey+0xdc>
			if(u8_pinValue == PIN_LOW)
			{
				if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
					return KEYPAD_STATUS_ERROR_NOK;
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	01 c0       	rjmp	.+2      	; 0x194 <Keypad_readKey+0xdc>
			}
		}
		
		/* Return Back logic HIGH on the Column Pin */
		if(Dio_writePin(gau8_Columns[u8_ColumnIndex], PIN_HIGH) != DIO_STATUS_ERROR_OK)
			return KEYPAD_STATUS_ERROR_NOK;
 192:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return KEYPAD_STATUS_NOT_PRESSED;
 194:	0f 90       	pop	r0
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	df 90       	pop	r13
 1a4:	cf 90       	pop	r12
 1a6:	bf 90       	pop	r11
 1a8:	af 90       	pop	r10
 1aa:	08 95       	ret

000001ac <Lcd_WriteData>:
static enuLcd_Status_t genu_LcdModuleState = LCD_STATUS_NOT_INIT;
// static uint8_t gu8_currentColumn = 0;
// static uint8_t gu8_currentRow = 0;

static void Lcd_WriteData(uint8_t u8_Data)
{
 1ac:	cf 93       	push	r28
 1ae:	c8 2f       	mov	r28, r24
	(u8_Data & 0x1)!=0 ? Dio_writePin(LCD_D4,PIN_HIGH) : Dio_writePin(LCD_D4,PIN_LOW);
 1b0:	80 ff       	sbrs	r24, 0
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <Lcd_WriteData+0x12>
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	8a e0       	ldi	r24, 0x0A	; 10
 1b8:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_writePin>
 1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <Lcd_WriteData+0x1a>
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	8a e0       	ldi	r24, 0x0A	; 10
 1c2:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_writePin>
	(u8_Data & 0x2)!=0 ? Dio_writePin(LCD_D5,PIN_HIGH) : Dio_writePin(LCD_D5,PIN_LOW);
 1c6:	c1 ff       	sbrs	r28, 1
 1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <Lcd_WriteData+0x28>
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	8b e0       	ldi	r24, 0x0B	; 11
 1ce:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_writePin>
 1d2:	04 c0       	rjmp	.+8      	; 0x1dc <Lcd_WriteData+0x30>
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	8b e0       	ldi	r24, 0x0B	; 11
 1d8:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_writePin>
	(u8_Data & 0x4)!=0 ? Dio_writePin(LCD_D6,PIN_HIGH) : Dio_writePin(LCD_D6,PIN_LOW);
 1dc:	c2 ff       	sbrs	r28, 2
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <Lcd_WriteData+0x3e>
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	8c e0       	ldi	r24, 0x0C	; 12
 1e4:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_writePin>
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <Lcd_WriteData+0x46>
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_writePin>
	(u8_Data & 0x8)!=0 ? Dio_writePin(LCD_D7,PIN_HIGH) : Dio_writePin(LCD_D7,PIN_LOW);
 1f2:	c3 ff       	sbrs	r28, 3
 1f4:	05 c0       	rjmp	.+10     	; 0x200 <Lcd_WriteData+0x54>
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	8d e0       	ldi	r24, 0x0D	; 13
 1fa:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_writePin>
 1fe:	04 c0       	rjmp	.+8      	; 0x208 <Lcd_WriteData+0x5c>
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	8d e0       	ldi	r24, 0x0D	; 13
 204:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_writePin>
}
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <Lcd_EnableToggle>:
static void Lcd_EnableToggle(void)
{
	ENABLE;
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	89 e0       	ldi	r24, 0x09	; 9
 210:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_writePin>
	Delay_ms(1);
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	50 e0       	ldi	r21, 0x00	; 0
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 44 02 	call	0x488	; 0x488 <Delay_ms>
	DISABLE;
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	89 e0       	ldi	r24, 0x09	; 9
 22c:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_writePin>
 230:	08 95       	ret

00000232 <Lcd_sendCommand>:
* Parameters (out): None
* Return value: enuLcd_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to Send a Command to the LCD.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLcd_Status_t Lcd_sendCommand(uint8_t u8_command)
{
 232:	cf 93       	push	r28
 234:	c8 2f       	mov	r28, r24
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	
	CMD;
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	87 e0       	ldi	r24, 0x07	; 7
 23a:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_writePin>
	Lcd_WriteData((u8_command & 0xF0)>>4); 
 23e:	8c 2f       	mov	r24, r28
 240:	82 95       	swap	r24
 242:	8f 70       	andi	r24, 0x0F	; 15
 244:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Lcd_WriteData>
	Lcd_EnableToggle();
 248:	0e 94 06 01 	call	0x20c	; 0x20c <Lcd_EnableToggle>
	Lcd_WriteData(u8_command & 0x0F);
 24c:	8c 2f       	mov	r24, r28
 24e:	8f 70       	andi	r24, 0x0F	; 15
 250:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Lcd_WriteData>
	Lcd_EnableToggle();
 254:	0e 94 06 01 	call	0x20c	; 0x20c <Lcd_EnableToggle>
				
	return LCD_STATUS_ERROR_OK;
}
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <Lcd_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Lcd module is already initialized */
	if (genu_LcdModuleState == LCD_STATUS_INIT)
 25e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <genu_LcdModuleState>
 262:	86 30       	cpi	r24, 0x06	; 6
 264:	59 f1       	breq	.+86     	; 0x2bc <Lcd_init+0x5e>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
 266:	86 e7       	ldi	r24, 0x76	; 118
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Dio_init>
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
 26e:	81 30       	cpi	r24, 0x01	; 1
 270:	11 f0       	breq	.+4      	; 0x276 <Lcd_init+0x18>
 272:	87 30       	cpi	r24, 0x07	; 7
 274:	11 f5       	brne	.+68     	; 0x2ba <Lcd_init+0x5c>
		return LCD_STATUS_ERROR_NOK;
	
	CMD;
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	87 e0       	ldi	r24, 0x07	; 7
 27a:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_writePin>
	DISABLE;
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	89 e0       	ldi	r24, 0x09	; 9
 282:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_writePin>
	
	Lcd_sendCommand(0x33);
 286:	83 e3       	ldi	r24, 0x33	; 51
 288:	0e 94 19 01 	call	0x232	; 0x232 <Lcd_sendCommand>
	Lcd_sendCommand(0x32);
 28c:	82 e3       	ldi	r24, 0x32	; 50
 28e:	0e 94 19 01 	call	0x232	; 0x232 <Lcd_sendCommand>
	Lcd_sendCommand(0x28);
 292:	88 e2       	ldi	r24, 0x28	; 40
 294:	0e 94 19 01 	call	0x232	; 0x232 <Lcd_sendCommand>
	Lcd_sendCommand(0x08);
 298:	88 e0       	ldi	r24, 0x08	; 8
 29a:	0e 94 19 01 	call	0x232	; 0x232 <Lcd_sendCommand>
	Lcd_sendCommand(0x01);
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 19 01 	call	0x232	; 0x232 <Lcd_sendCommand>
	Lcd_sendCommand(0x06);
 2a4:	86 e0       	ldi	r24, 0x06	; 6
 2a6:	0e 94 19 01 	call	0x232	; 0x232 <Lcd_sendCommand>
	Lcd_sendCommand(0x0C);
 2aa:	8c e0       	ldi	r24, 0x0C	; 12
 2ac:	0e 94 19 01 	call	0x232	; 0x232 <Lcd_sendCommand>
	
	/* Change the state of the Lcd module to Initialized */
	genu_LcdModuleState = LCD_STATUS_INIT;
 2b0:	86 e0       	ldi	r24, 0x06	; 6
 2b2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <genu_LcdModuleState>
	return LCD_STATUS_ERROR_OK;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the DIO Module and check if any error returned */
	enuDio_Status_t Dio_State = Dio_init(strDio_pins);
	if((DIO_STATUS_ERROR_OK != Dio_State) && (DIO_STATUS_ALREADY_INIT != Dio_State))
		return LCD_STATUS_ERROR_NOK;
 2ba:	80 e0       	ldi	r24, 0x00	; 0
	Lcd_sendCommand(0x0C);
	
	/* Change the state of the Lcd module to Initialized */
	genu_LcdModuleState = LCD_STATUS_INIT;
	return LCD_STATUS_ERROR_OK;
}
 2bc:	08 95       	ret

000002be <Lcd_setCursor>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Lcd module is not initialized */
	if (genu_LcdModuleState != LCD_STATUS_INIT)
 2be:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <genu_LcdModuleState>
 2c2:	96 30       	cpi	r25, 0x06	; 6
 2c4:	89 f4       	brne	.+34     	; 0x2e8 <Lcd_setCursor+0x2a>
	{
		return LCD_STATUS_NOT_INIT;
	}else{/*Nothing to here*/}
	/* Check if the Row index is out of range */
	if(u8_Row > LCD_ROWS_NUM)
 2c6:	83 30       	cpi	r24, 0x03	; 3
 2c8:	88 f4       	brcc	.+34     	; 0x2ec <Lcd_setCursor+0x2e>
	{
		return LCD_STATUS_ERROR_ROW_INVALID;
	}else{/*Nothing to here*/}
	/* Check if the Column index is out of range */
	if(u8_Column > LCD_COLUMNS_NUM)
 2ca:	61 31       	cpi	r22, 0x11	; 17
 2cc:	88 f4       	brcc	.+34     	; 0x2f0 <Lcd_setCursor+0x32>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	    uint8_t u8_Command=0x00;
		u8_Command = LCD_ROW_1_INDEX + u8_Row*0x40 + u8_Column;
 2ce:	28 2f       	mov	r18, r24
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	2e 5f       	subi	r18, 0xFE	; 254
 2d4:	3f 4f       	sbci	r19, 0xFF	; 255
	    Lcd_sendCommand(u8_Command);
 2d6:	86 2f       	mov	r24, r22
 2d8:	90 e4       	ldi	r25, 0x40	; 64
 2da:	29 9f       	mul	r18, r25
 2dc:	80 0d       	add	r24, r0
 2de:	11 24       	eor	r1, r1
 2e0:	0e 94 19 01 	call	0x232	; 0x232 <Lcd_sendCommand>
		
	return LCD_STATUS_ERROR_OK;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	08 95       	ret
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Lcd module is not initialized */
	if (genu_LcdModuleState != LCD_STATUS_INIT)
	{
		return LCD_STATUS_NOT_INIT;
 2e8:	85 e0       	ldi	r24, 0x05	; 5
 2ea:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the Row index is out of range */
	if(u8_Row > LCD_ROWS_NUM)
	{
		return LCD_STATUS_ERROR_ROW_INVALID;
 2ec:	83 e0       	ldi	r24, 0x03	; 3
 2ee:	08 95       	ret
	}else{/*Nothing to here*/}
	/* Check if the Column index is out of range */
	if(u8_Column > LCD_COLUMNS_NUM)
	{
		return LCD_STATUS_ERROR_COL_INVALID;
 2f0:	82 e0       	ldi	r24, 0x02	; 2
	    uint8_t u8_Command=0x00;
		u8_Command = LCD_ROW_1_INDEX + u8_Row*0x40 + u8_Column;
	    Lcd_sendCommand(u8_Command);
		
	return LCD_STATUS_ERROR_OK;
}
 2f2:	08 95       	ret

000002f4 <Lcd_printChar>:
* Parameters (out): None
* Return value: enuLcd_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print single character at the current position of the cursor in the LCD.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLcd_Status_t Lcd_printChar(uint8_t u8_data)
{
 2f4:	cf 93       	push	r28
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Lcd module is not initialized */
	if (genu_LcdModuleState != LCD_STATUS_INIT)
 2f6:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <genu_LcdModuleState>
 2fa:	96 30       	cpi	r25, 0x06	; 6
 2fc:	a1 f4       	brne	.+40     	; 0x326 <Lcd_printChar+0x32>
 2fe:	c8 2f       	mov	r28, r24
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	DATA;             // => RS = 1
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	87 e0       	ldi	r24, 0x07	; 7
 304:	0e 94 c2 03 	call	0x784	; 0x784 <Dio_writePin>
	Lcd_WriteData((u8_data & 0xF0)>>4);             //Data transfer
 308:	8c 2f       	mov	r24, r28
 30a:	82 95       	swap	r24
 30c:	8f 70       	andi	r24, 0x0F	; 15
 30e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Lcd_WriteData>
	Lcd_EnableToggle();
 312:	0e 94 06 01 	call	0x20c	; 0x20c <Lcd_EnableToggle>
	Lcd_WriteData(u8_data & 0x0F);
 316:	8c 2f       	mov	r24, r28
 318:	8f 70       	andi	r24, 0x0F	; 15
 31a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Lcd_WriteData>
	Lcd_EnableToggle();
 31e:	0e 94 06 01 	call	0x20c	; 0x20c <Lcd_EnableToggle>
		
	return LCD_STATUS_ERROR_OK;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	01 c0       	rjmp	.+2      	; 0x328 <Lcd_printChar+0x34>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Lcd module is not initialized */
	if (genu_LcdModuleState != LCD_STATUS_INIT)
	{
		return LCD_STATUS_NOT_INIT;
 326:	85 e0       	ldi	r24, 0x05	; 5
	Lcd_EnableToggle();
	Lcd_WriteData(u8_data & 0x0F);
	Lcd_EnableToggle();
		
	return LCD_STATUS_ERROR_OK;
}
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <Lcd_printString>:
* Parameters (out): None
* Return value: enuLcd_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print string at the current position of the cursor in the LCD.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuLcd_Status_t Lcd_printString(uint8_t *pu8_data)
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	ec 01       	movw	r28, r24
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Lcd module is not initialized */
	if (genu_LcdModuleState != LCD_STATUS_INIT)
 332:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <genu_LcdModuleState>
 336:	86 30       	cpi	r24, 0x06	; 6
 338:	49 f4       	brne	.+18     	; 0x34c <Lcd_printString+0x20>
 33a:	03 c0       	rjmp	.+6      	; 0x342 <Lcd_printString+0x16>
/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	while (*pu8_data != '\0')
	{
		Lcd_printChar(*pu8_data++);
 33c:	21 96       	adiw	r28, 0x01	; 1
 33e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <Lcd_printChar>
/**************************************************************************************/

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	while (*pu8_data != '\0')
 342:	88 81       	ld	r24, Y
 344:	81 11       	cpse	r24, r1
 346:	fa cf       	rjmp	.-12     	; 0x33c <Lcd_printString+0x10>
	{
		Lcd_printChar(*pu8_data++);
	}
		
	return LCD_STATUS_ERROR_OK;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	01 c0       	rjmp	.+2      	; 0x34e <Lcd_printString+0x22>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Lcd module is not initialized */
	if (genu_LcdModuleState != LCD_STATUS_INIT)
	{
		return LCD_STATUS_NOT_INIT;
 34c:	85 e0       	ldi	r24, 0x05	; 5
	{
		Lcd_printChar(*pu8_data++);
	}
		
	return LCD_STATUS_ERROR_OK;
}
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <Uart_RXC_ISR>:

uint8_t gau8_data[MAX_INPUT_SIZE]={0};
uint8_t gu8_counter=0;
uint8_t gu8_flag=0;
void Uart_RXC_ISR(void)
{
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
	gau8_data[gu8_counter] = Uart_DataRegister();
 358:	c0 91 c3 00 	lds	r28, 0x00C3	; 0x8000c3 <gu8_counter>
 35c:	d0 e0       	ldi	r29, 0x00	; 0
 35e:	0e 94 d7 06 	call	0xdae	; 0xdae <Uart_DataRegister>
 362:	cc 53       	subi	r28, 0x3C	; 60
 364:	df 4f       	sbci	r29, 0xFF	; 255
 366:	88 83       	st	Y, r24
	if (gau8_data[gu8_counter] == '\r')
 368:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <gu8_counter>
 36c:	e9 2f       	mov	r30, r25
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	ec 53       	subi	r30, 0x3C	; 60
 372:	ff 4f       	sbci	r31, 0xFF	; 255
 374:	80 81       	ld	r24, Z
 376:	8d 30       	cpi	r24, 0x0D	; 13
 378:	71 f4       	brne	.+28     	; 0x396 <Uart_RXC_ISR+0x42>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
 37a:	0e 94 90 06 	call	0xd20	; 0xd20 <Uart_sendByte>
		gau8_data[gu8_counter] = '\0';
 37e:	e0 91 c3 00 	lds	r30, 0x00C3	; 0x8000c3 <gu8_counter>
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	ec 53       	subi	r30, 0x3C	; 60
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	10 82       	st	Z, r1
		gu8_counter = 0;
 38a:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <gu8_counter>
		gu8_flag = 1;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__data_end>
 394:	15 c0       	rjmp	.+42     	; 0x3c0 <Uart_RXC_ISR+0x6c>
	}else if( (gau8_data[gu8_counter] == '\b') && (gu8_counter != 0))
 396:	88 30       	cpi	r24, 0x08	; 8
 398:	51 f4       	brne	.+20     	; 0x3ae <Uart_RXC_ISR+0x5a>
 39a:	99 23       	and	r25, r25
 39c:	41 f0       	breq	.+16     	; 0x3ae <Uart_RXC_ISR+0x5a>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
 39e:	0e 94 90 06 	call	0xd20	; 0xd20 <Uart_sendByte>
		gu8_counter--;
 3a2:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <gu8_counter>
 3a6:	81 50       	subi	r24, 0x01	; 1
 3a8:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <gu8_counter>
 3ac:	09 c0       	rjmp	.+18     	; 0x3c0 <Uart_RXC_ISR+0x6c>
	}
	else if(gau8_data[gu8_counter] != '\b')
 3ae:	88 30       	cpi	r24, 0x08	; 8
 3b0:	39 f0       	breq	.+14     	; 0x3c0 <Uart_RXC_ISR+0x6c>
	{
		Uart_sendByte(gau8_data[gu8_counter]);
 3b2:	0e 94 90 06 	call	0xd20	; 0xd20 <Uart_sendByte>
		gu8_counter++;
 3b6:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <gu8_counter>
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
 3bc:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <gu8_counter>
	}
}
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <Terminal_init>:
{
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the Terminal module is already initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_INIT)
 3c6:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <genu_TerminalModuleState>
 3ca:	83 30       	cpi	r24, 0x03	; 3
 3cc:	81 f0       	breq	.+32     	; 0x3ee <Terminal_init+0x28>

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
 3ce:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <Uart_init>
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	11 f0       	breq	.+4      	; 0x3da <Terminal_init+0x14>
 3d6:	87 30       	cpi	r24, 0x07	; 7
 3d8:	49 f4       	brne	.+18     	; 0x3ec <Terminal_init+0x26>
		return TERMINAL_STATUS_ERROR_NOK;
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
 3da:	8a ea       	ldi	r24, 0xAA	; 170
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0e 94 c2 06 	call	0xd84	; 0xd84 <Uart_EnableNotification_RXC>
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
 3e2:	83 e0       	ldi	r24, 0x03	; 3
 3e4:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <genu_TerminalModuleState>
	return TERMINAL_STATUS_ERROR_OK;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	08 95       	ret
/*								Function Implementation								  */
/**************************************************************************************/
	/* Initialize the Uart Module */
	enuUart_Status_t Uart_State = Uart_init();
	if((UART_STATUS_ERROR_OK != Uart_State) && (UART_STATUS_ALREADY_INIT != Uart_State))
		return TERMINAL_STATUS_ERROR_NOK;
 3ec:	80 e0       	ldi	r24, 0x00	; 0
	Uart_EnableNotification_RXC(Uart_RXC_ISR);	
	/* Change the state of the Terminal module to Initialized */
	genu_TerminalModuleState = TERMINAL_STATUS_INIT;
	return TERMINAL_STATUS_ERROR_OK;
}
 3ee:	08 95       	ret

000003f0 <Terminal_Out>:
* Parameters (out): None
* Return value: enuLed_Status_t - return the status of the function ERROR_OK or NOT_OK
* Description: Function to print a string on the terminal
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuTerminal_Status_t Terminal_Out(uint8_t *pu8_OutputData)
{
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
/**************************************************************************************/
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
 3f4:	00 97       	sbiw	r24, 0x00	; 0
 3f6:	81 f0       	breq	.+32     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
	{
		return TERMINAL_STATUS_ERROR_NULL;
	}else{/*Nothing to here*/}
	/* Check if the Terminal module is not initialized */
	if (genu_TerminalModuleState == TERMINAL_STATUS_NOT_INIT)
 3f8:	20 91 75 00 	lds	r18, 0x0075	; 0x800075 <genu_TerminalModuleState>
 3fc:	22 30       	cpi	r18, 0x02	; 2
 3fe:	79 f0       	breq	.+30     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 400:	ec 01       	movw	r28, r24

/**************************************************************************************/
/*								Function Implementation								  */
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
 402:	0e 94 4e 07 	call	0xe9c	; 0xe9c <stringLength>
 406:	68 2f       	mov	r22, r24
 408:	70 e0       	ldi	r23, 0x00	; 0
 40a:	ce 01       	movw	r24, r28
 40c:	0e 94 9b 06 	call	0xd36	; 0xd36 <Uart_sendPacket>
	if(UART_STATUS_ERROR_OK != Uart_State)
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	21 f0       	breq	.+8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
		return TERMINAL_STATUS_ERROR_NOK;
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	03 c0       	rjmp	.+6      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
/*								Start of Error Checking								  */
/**************************************************************************************/
	/* Check if the argument is null pointer */
	if (pu8_OutputData == NULL_PTR)
	{
		return TERMINAL_STATUS_ERROR_NULL;
 418:	24 e0       	ldi	r18, 0x04	; 4
 41a:	01 c0       	rjmp	.+2      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
/**************************************************************************************/
	/* Put Output String on Terminal */
	enuUart_Status_t Uart_State = Uart_sendPacket(pu8_OutputData, stringLength(pu8_OutputData));
	if(UART_STATUS_ERROR_OK != Uart_State)
		return TERMINAL_STATUS_ERROR_NOK;
	return TERMINAL_STATUS_ERROR_OK;
 41c:	21 e0       	ldi	r18, 0x01	; 1
}
 41e:	82 2f       	mov	r24, r18
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <main>:
#include "ECUAL/Keypad Module/Keypad.h"
#include "ECUAL/Lcd Module/Lcd.h"
#include "ECUAL/Terminal Module/Terminal.h"
#include "MCAL/Delay Module/Delay.h"
int main(void)
{
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	00 d0       	rcall	.+0      	; 0x42c <main+0x6>
 42c:	cd b7       	in	r28, 0x3d	; 61
 42e:	de b7       	in	r29, 0x3e	; 62
	Keypad_init();
 430:	0e 94 49 00 	call	0x92	; 0x92 <Keypad_init>
	Terminal_init();
 434:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <Terminal_init>
	Lcd_init();
 438:	0e 94 2f 01 	call	0x25e	; 0x25e <Lcd_init>
	uint8_t u8_KeyPressed[2]={0};
 43c:	1a 82       	std	Y+2, r1	; 0x02
 43e:	19 82       	std	Y+1, r1	; 0x01
	u8_KeyPressed[1]='\0';
	enuKeypad_Status_t enu_KeypadStatus=0;
	while (1)
	{
		
		enu_KeypadStatus = Keypad_readKey(u8_KeyPressed);
 440:	ce 01       	movw	r24, r28
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	0e 94 5c 00 	call	0xb8	; 0xb8 <Keypad_readKey>
		if(enu_KeypadStatus == KEYPAD_STATUS_PRESSED)
 448:	86 30       	cpi	r24, 0x06	; 6
 44a:	99 f4       	brne	.+38     	; 0x472 <main+0x4c>
		{
			Terminal_Out(u8_KeyPressed);
 44c:	ce 01       	movw	r24, r28
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Terminal_Out>
			Lcd_setCursor(1,0);
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	0e 94 5f 01 	call	0x2be	; 0x2be <Lcd_setCursor>
			Lcd_printChar(u8_KeyPressed[0]);
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <Lcd_printChar>
			Lcd_setCursor(0,0);
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	0e 94 5f 01 	call	0x2be	; 0x2be <Lcd_setCursor>
			Lcd_printString((uint8_t*)"Keypad Feedback");
 46a:	8e ea       	ldi	r24, 0xAE	; 174
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 96 01 	call	0x32c	; 0x32c <Lcd_printString>
		}else if(enu_KeypadStatus == KEYPAD_STATUS_NOT_PRESSED)
		{
			
		}
		Delay_ms(200);
 472:	28 ec       	ldi	r18, 0xC8	; 200
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	40 e0       	ldi	r20, 0x00	; 0
 478:	50 e0       	ldi	r21, 0x00	; 0
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 44 02 	call	0x488	; 0x488 <Delay_ms>
	}
 486:	dc cf       	rjmp	.-72     	; 0x440 <main+0x1a>

00000488 <Delay_ms>:
void Delay_us(uint64_t u64_time_us)
{

}
void Delay_ms(uint64_t u64_time_ms)
{
 488:	2f 92       	push	r2
 48a:	3f 92       	push	r3
 48c:	4f 92       	push	r4
 48e:	5f 92       	push	r5
 490:	6f 92       	push	r6
 492:	7f 92       	push	r7
 494:	8f 92       	push	r8
 496:	9f 92       	push	r9
 498:	af 92       	push	r10
 49a:	bf 92       	push	r11
 49c:	cf 92       	push	r12
 49e:	df 92       	push	r13
 4a0:	ef 92       	push	r14
 4a2:	ff 92       	push	r15
 4a4:	0f 93       	push	r16
 4a6:	1f 93       	push	r17
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	00 d0       	rcall	.+0      	; 0x4ae <Delay_ms+0x26>
 4ae:	00 d0       	rcall	.+0      	; 0x4b0 <Delay_ms+0x28>
 4b0:	1f 92       	push	r1
 4b2:	cd b7       	in	r28, 0x3d	; 61
 4b4:	de b7       	in	r29, 0x3e	; 62
 4b6:	22 2e       	mov	r2, r18
 4b8:	33 2e       	mov	r3, r19
 4ba:	44 2e       	mov	r4, r20
 4bc:	55 2e       	mov	r5, r21
 4be:	66 2e       	mov	r6, r22
 4c0:	79 83       	std	Y+1, r23	; 0x01
 4c2:	8a 83       	std	Y+2, r24	; 0x02
 4c4:	9b 83       	std	Y+3, r25	; 0x03
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
 4c6:	91 2c       	mov	r9, r1
 4c8:	1d 82       	std	Y+5, r1	; 0x05
 4ca:	1c 82       	std	Y+4, r1	; 0x04
 4cc:	b0 e0       	ldi	r27, 0x00	; 0
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	e0 e0       	ldi	r30, 0x00	; 0
 4d2:	71 2c       	mov	r7, r1
 4d4:	81 2c       	mov	r8, r1
 4d6:	3d c0       	rjmp	.+122    	; 0x552 <Delay_ms+0xca>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
 4d8:	2c 2d       	mov	r18, r12
 4da:	3d 2d       	mov	r19, r13
 4dc:	4e 2d       	mov	r20, r14
 4de:	5f 2d       	mov	r21, r15
 4e0:	60 2f       	mov	r22, r16
 4e2:	71 2f       	mov	r23, r17
 4e4:	8a 2d       	mov	r24, r10
 4e6:	9b 2d       	mov	r25, r11
 4e8:	a1 e0       	ldi	r26, 0x01	; 1
 4ea:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__adddi3_s8>
 4ee:	c2 2e       	mov	r12, r18
 4f0:	d3 2e       	mov	r13, r19
 4f2:	e4 2e       	mov	r14, r20
 4f4:	f5 2e       	mov	r15, r21
 4f6:	06 2f       	mov	r16, r22
 4f8:	17 2f       	mov	r17, r23
 4fa:	a8 2e       	mov	r10, r24
 4fc:	b9 2e       	mov	r11, r25
 4fe:	08 c0       	rjmp	.+16     	; 0x510 <Delay_ms+0x88>
 500:	c1 2c       	mov	r12, r1
 502:	d1 2c       	mov	r13, r1
 504:	e1 2c       	mov	r14, r1
 506:	f1 2c       	mov	r15, r1
 508:	00 e0       	ldi	r16, 0x00	; 0
 50a:	10 e0       	ldi	r17, 0x00	; 0
 50c:	a1 2c       	mov	r10, r1
 50e:	b1 2c       	mov	r11, r1
 510:	2c 2d       	mov	r18, r12
 512:	3d 2d       	mov	r19, r13
 514:	4e 2d       	mov	r20, r14
 516:	5f 2d       	mov	r21, r15
 518:	60 2f       	mov	r22, r16
 51a:	71 2f       	mov	r23, r17
 51c:	8a 2d       	mov	r24, r10
 51e:	9b 2d       	mov	r25, r11
 520:	ac e0       	ldi	r26, 0x0C	; 12
 522:	0e 94 6f 07 	call	0xede	; 0xede <__cmpdi2_s8>
 526:	c1 f2       	breq	.-80     	; 0x4d8 <Delay_ms+0x50>
 528:	b8 f2       	brcs	.-82     	; 0x4d8 <Delay_ms+0x50>
 52a:	8c 81       	ldd	r24, Y+4	; 0x04

}
void Delay_ms(uint64_t u64_time_ms)
{
	uint64_t i,j;
	for (i=0;i<u64_time_ms;i++) // this is For(); loop delay used to define delay value in Embedded C
 52c:	29 2d       	mov	r18, r9
 52e:	3d 81       	ldd	r19, Y+5	; 0x05
 530:	48 2f       	mov	r20, r24
 532:	5b 2f       	mov	r21, r27
 534:	6f 2f       	mov	r22, r31
 536:	7e 2f       	mov	r23, r30
 538:	87 2d       	mov	r24, r7
 53a:	98 2d       	mov	r25, r8
 53c:	a1 e0       	ldi	r26, 0x01	; 1
 53e:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__adddi3_s8>
 542:	92 2e       	mov	r9, r18
 544:	3d 83       	std	Y+5, r19	; 0x05
 546:	4c 83       	std	Y+4, r20	; 0x04
 548:	b5 2f       	mov	r27, r21
 54a:	f6 2f       	mov	r31, r22
 54c:	e7 2f       	mov	r30, r23
 54e:	78 2e       	mov	r7, r24
 550:	89 2e       	mov	r8, r25
 552:	29 2d       	mov	r18, r9
 554:	3d 81       	ldd	r19, Y+5	; 0x05
 556:	4c 81       	ldd	r20, Y+4	; 0x04
 558:	5b 2f       	mov	r21, r27
 55a:	6f 2f       	mov	r22, r31
 55c:	7e 2f       	mov	r23, r30
 55e:	87 2d       	mov	r24, r7
 560:	98 2d       	mov	r25, r8
 562:	a2 2c       	mov	r10, r2
 564:	b3 2c       	mov	r11, r3
 566:	c4 2c       	mov	r12, r4
 568:	d5 2c       	mov	r13, r5
 56a:	e6 2c       	mov	r14, r6
 56c:	f9 80       	ldd	r15, Y+1	; 0x01
 56e:	0a 81       	ldd	r16, Y+2	; 0x02
 570:	1b 81       	ldd	r17, Y+3	; 0x03
 572:	0e 94 66 07 	call	0xecc	; 0xecc <__cmpdi2>
 576:	20 f2       	brcs	.-120    	; 0x500 <Delay_ms+0x78>
	{
		for (j=0;j<DELAY_MS_ITERATION;j++);
	}
}
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	0f 90       	pop	r0
 580:	0f 90       	pop	r0
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	1f 91       	pop	r17
 588:	0f 91       	pop	r16
 58a:	ff 90       	pop	r15
 58c:	ef 90       	pop	r14
 58e:	df 90       	pop	r13
 590:	cf 90       	pop	r12
 592:	bf 90       	pop	r11
 594:	af 90       	pop	r10
 596:	9f 90       	pop	r9
 598:	8f 90       	pop	r8
 59a:	7f 90       	pop	r7
 59c:	6f 90       	pop	r6
 59e:	5f 90       	pop	r5
 5a0:	4f 90       	pop	r4
 5a2:	3f 90       	pop	r3
 5a4:	2f 90       	pop	r2
 5a6:	08 95       	ret

000005a8 <Dio_init>:
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}	
	return DIO_STATUS_ERROR_OK;
}
 5a8:	ac 01       	movw	r20, r24
 5aa:	89 2b       	or	r24, r25
 5ac:	09 f4       	brne	.+2      	; 0x5b0 <Dio_init+0x8>
 5ae:	e4 c0       	rjmp	.+456    	; 0x778 <Dio_init+0x1d0>
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	d7 c0       	rjmp	.+430    	; 0x762 <Dio_init+0x1ba>
 5b4:	e9 2f       	mov	r30, r25
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	ee 0f       	add	r30, r30
 5ba:	ff 1f       	adc	r31, r31
 5bc:	ee 0f       	add	r30, r30
 5be:	ff 1f       	adc	r31, r31
 5c0:	e4 0f       	add	r30, r20
 5c2:	f5 1f       	adc	r31, r21
 5c4:	31 81       	ldd	r19, Z+1	; 0x01
 5c6:	38 30       	cpi	r19, 0x08	; 8
 5c8:	08 f0       	brcs	.+2      	; 0x5cc <Dio_init+0x24>
 5ca:	d8 c0       	rjmp	.+432    	; 0x77c <Dio_init+0x1d4>
 5cc:	20 81       	ld	r18, Z
 5ce:	21 30       	cpi	r18, 0x01	; 1
 5d0:	c1 f1       	breq	.+112    	; 0x642 <Dio_init+0x9a>
 5d2:	38 f0       	brcs	.+14     	; 0x5e2 <Dio_init+0x3a>
 5d4:	22 30       	cpi	r18, 0x02	; 2
 5d6:	09 f4       	brne	.+2      	; 0x5da <Dio_init+0x32>
 5d8:	64 c0       	rjmp	.+200    	; 0x6a2 <Dio_init+0xfa>
 5da:	23 30       	cpi	r18, 0x03	; 3
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <Dio_init+0x38>
 5de:	91 c0       	rjmp	.+290    	; 0x702 <Dio_init+0x15a>
 5e0:	cf c0       	rjmp	.+414    	; 0x780 <Dio_init+0x1d8>
 5e2:	2a b3       	in	r18, 0x1a	; 26
 5e4:	61 e0       	ldi	r22, 0x01	; 1
 5e6:	70 e0       	ldi	r23, 0x00	; 0
 5e8:	db 01       	movw	r26, r22
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <Dio_init+0x48>
 5ec:	aa 0f       	add	r26, r26
 5ee:	bb 1f       	adc	r27, r27
 5f0:	3a 95       	dec	r19
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <Dio_init+0x44>
 5f4:	8a 2f       	mov	r24, r26
 5f6:	80 95       	com	r24
 5f8:	82 23       	and	r24, r18
 5fa:	8a bb       	out	0x1a, r24	; 26
 5fc:	aa b3       	in	r26, 0x1a	; 26
 5fe:	82 81       	ldd	r24, Z+2	; 0x02
 600:	28 2f       	mov	r18, r24
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	01 80       	ldd	r0, Z+1	; 0x01
 606:	02 c0       	rjmp	.+4      	; 0x60c <Dio_init+0x64>
 608:	22 0f       	add	r18, r18
 60a:	33 1f       	adc	r19, r19
 60c:	0a 94       	dec	r0
 60e:	e2 f7       	brpl	.-8      	; 0x608 <Dio_init+0x60>
 610:	2a 2b       	or	r18, r26
 612:	2a bb       	out	0x1a, r18	; 26
 614:	8b b3       	in	r24, 0x1b	; 27
 616:	01 80       	ldd	r0, Z+1	; 0x01
 618:	02 c0       	rjmp	.+4      	; 0x61e <Dio_init+0x76>
 61a:	66 0f       	add	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	0a 94       	dec	r0
 620:	e2 f7       	brpl	.-8      	; 0x61a <Dio_init+0x72>
 622:	60 95       	com	r22
 624:	68 23       	and	r22, r24
 626:	6b bb       	out	0x1b, r22	; 27
 628:	6b b3       	in	r22, 0x1b	; 27
 62a:	83 81       	ldd	r24, Z+3	; 0x03
 62c:	28 2f       	mov	r18, r24
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	01 80       	ldd	r0, Z+1	; 0x01
 632:	02 c0       	rjmp	.+4      	; 0x638 <Dio_init+0x90>
 634:	22 0f       	add	r18, r18
 636:	33 1f       	adc	r19, r19
 638:	0a 94       	dec	r0
 63a:	e2 f7       	brpl	.-8      	; 0x634 <Dio_init+0x8c>
 63c:	26 2b       	or	r18, r22
 63e:	2b bb       	out	0x1b, r18	; 27
 640:	8f c0       	rjmp	.+286    	; 0x760 <Dio_init+0x1b8>
 642:	27 b3       	in	r18, 0x17	; 23
 644:	61 e0       	ldi	r22, 0x01	; 1
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	db 01       	movw	r26, r22
 64a:	02 c0       	rjmp	.+4      	; 0x650 <Dio_init+0xa8>
 64c:	aa 0f       	add	r26, r26
 64e:	bb 1f       	adc	r27, r27
 650:	3a 95       	dec	r19
 652:	e2 f7       	brpl	.-8      	; 0x64c <Dio_init+0xa4>
 654:	8a 2f       	mov	r24, r26
 656:	80 95       	com	r24
 658:	82 23       	and	r24, r18
 65a:	87 bb       	out	0x17, r24	; 23
 65c:	a7 b3       	in	r26, 0x17	; 23
 65e:	82 81       	ldd	r24, Z+2	; 0x02
 660:	28 2f       	mov	r18, r24
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	01 80       	ldd	r0, Z+1	; 0x01
 666:	02 c0       	rjmp	.+4      	; 0x66c <Dio_init+0xc4>
 668:	22 0f       	add	r18, r18
 66a:	33 1f       	adc	r19, r19
 66c:	0a 94       	dec	r0
 66e:	e2 f7       	brpl	.-8      	; 0x668 <Dio_init+0xc0>
 670:	2a 2b       	or	r18, r26
 672:	27 bb       	out	0x17, r18	; 23
 674:	88 b3       	in	r24, 0x18	; 24
 676:	01 80       	ldd	r0, Z+1	; 0x01
 678:	02 c0       	rjmp	.+4      	; 0x67e <Dio_init+0xd6>
 67a:	66 0f       	add	r22, r22
 67c:	77 1f       	adc	r23, r23
 67e:	0a 94       	dec	r0
 680:	e2 f7       	brpl	.-8      	; 0x67a <Dio_init+0xd2>
 682:	60 95       	com	r22
 684:	68 23       	and	r22, r24
 686:	68 bb       	out	0x18, r22	; 24
 688:	68 b3       	in	r22, 0x18	; 24
 68a:	83 81       	ldd	r24, Z+3	; 0x03
 68c:	28 2f       	mov	r18, r24
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	01 80       	ldd	r0, Z+1	; 0x01
 692:	02 c0       	rjmp	.+4      	; 0x698 <Dio_init+0xf0>
 694:	22 0f       	add	r18, r18
 696:	33 1f       	adc	r19, r19
 698:	0a 94       	dec	r0
 69a:	e2 f7       	brpl	.-8      	; 0x694 <Dio_init+0xec>
 69c:	26 2b       	or	r18, r22
 69e:	28 bb       	out	0x18, r18	; 24
 6a0:	5f c0       	rjmp	.+190    	; 0x760 <Dio_init+0x1b8>
 6a2:	24 b3       	in	r18, 0x14	; 20
 6a4:	61 e0       	ldi	r22, 0x01	; 1
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	db 01       	movw	r26, r22
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <Dio_init+0x108>
 6ac:	aa 0f       	add	r26, r26
 6ae:	bb 1f       	adc	r27, r27
 6b0:	3a 95       	dec	r19
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <Dio_init+0x104>
 6b4:	8a 2f       	mov	r24, r26
 6b6:	80 95       	com	r24
 6b8:	82 23       	and	r24, r18
 6ba:	84 bb       	out	0x14, r24	; 20
 6bc:	a4 b3       	in	r26, 0x14	; 20
 6be:	82 81       	ldd	r24, Z+2	; 0x02
 6c0:	28 2f       	mov	r18, r24
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	01 80       	ldd	r0, Z+1	; 0x01
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <Dio_init+0x124>
 6c8:	22 0f       	add	r18, r18
 6ca:	33 1f       	adc	r19, r19
 6cc:	0a 94       	dec	r0
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <Dio_init+0x120>
 6d0:	2a 2b       	or	r18, r26
 6d2:	24 bb       	out	0x14, r18	; 20
 6d4:	85 b3       	in	r24, 0x15	; 21
 6d6:	01 80       	ldd	r0, Z+1	; 0x01
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <Dio_init+0x136>
 6da:	66 0f       	add	r22, r22
 6dc:	77 1f       	adc	r23, r23
 6de:	0a 94       	dec	r0
 6e0:	e2 f7       	brpl	.-8      	; 0x6da <Dio_init+0x132>
 6e2:	60 95       	com	r22
 6e4:	68 23       	and	r22, r24
 6e6:	65 bb       	out	0x15, r22	; 21
 6e8:	65 b3       	in	r22, 0x15	; 21
 6ea:	83 81       	ldd	r24, Z+3	; 0x03
 6ec:	28 2f       	mov	r18, r24
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	01 80       	ldd	r0, Z+1	; 0x01
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <Dio_init+0x150>
 6f4:	22 0f       	add	r18, r18
 6f6:	33 1f       	adc	r19, r19
 6f8:	0a 94       	dec	r0
 6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <Dio_init+0x14c>
 6fc:	26 2b       	or	r18, r22
 6fe:	25 bb       	out	0x15, r18	; 21
 700:	2f c0       	rjmp	.+94     	; 0x760 <Dio_init+0x1b8>
 702:	21 b3       	in	r18, 0x11	; 17
 704:	61 e0       	ldi	r22, 0x01	; 1
 706:	70 e0       	ldi	r23, 0x00	; 0
 708:	db 01       	movw	r26, r22
 70a:	02 c0       	rjmp	.+4      	; 0x710 <Dio_init+0x168>
 70c:	aa 0f       	add	r26, r26
 70e:	bb 1f       	adc	r27, r27
 710:	3a 95       	dec	r19
 712:	e2 f7       	brpl	.-8      	; 0x70c <Dio_init+0x164>
 714:	8a 2f       	mov	r24, r26
 716:	80 95       	com	r24
 718:	82 23       	and	r24, r18
 71a:	81 bb       	out	0x11, r24	; 17
 71c:	a1 b3       	in	r26, 0x11	; 17
 71e:	82 81       	ldd	r24, Z+2	; 0x02
 720:	28 2f       	mov	r18, r24
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	01 80       	ldd	r0, Z+1	; 0x01
 726:	02 c0       	rjmp	.+4      	; 0x72c <Dio_init+0x184>
 728:	22 0f       	add	r18, r18
 72a:	33 1f       	adc	r19, r19
 72c:	0a 94       	dec	r0
 72e:	e2 f7       	brpl	.-8      	; 0x728 <Dio_init+0x180>
 730:	2a 2b       	or	r18, r26
 732:	21 bb       	out	0x11, r18	; 17
 734:	82 b3       	in	r24, 0x12	; 18
 736:	01 80       	ldd	r0, Z+1	; 0x01
 738:	02 c0       	rjmp	.+4      	; 0x73e <Dio_init+0x196>
 73a:	66 0f       	add	r22, r22
 73c:	77 1f       	adc	r23, r23
 73e:	0a 94       	dec	r0
 740:	e2 f7       	brpl	.-8      	; 0x73a <Dio_init+0x192>
 742:	60 95       	com	r22
 744:	68 23       	and	r22, r24
 746:	62 bb       	out	0x12, r22	; 18
 748:	62 b3       	in	r22, 0x12	; 18
 74a:	83 81       	ldd	r24, Z+3	; 0x03
 74c:	28 2f       	mov	r18, r24
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	01 80       	ldd	r0, Z+1	; 0x01
 752:	02 c0       	rjmp	.+4      	; 0x758 <Dio_init+0x1b0>
 754:	22 0f       	add	r18, r18
 756:	33 1f       	adc	r19, r19
 758:	0a 94       	dec	r0
 75a:	e2 f7       	brpl	.-8      	; 0x754 <Dio_init+0x1ac>
 75c:	26 2b       	or	r18, r22
 75e:	22 bb       	out	0x12, r18	; 18
 760:	9f 5f       	subi	r25, 0xFF	; 255
 762:	9e 30       	cpi	r25, 0x0E	; 14
 764:	08 f4       	brcc	.+2      	; 0x768 <Dio_init+0x1c0>
 766:	26 cf       	rjmp	.-436    	; 0x5b4 <Dio_init+0xc>
 768:	50 93 c5 01 	sts	0x01C5, r21	; 0x8001c5 <pstrDio_pinsConfig+0x1>
 76c:	40 93 c4 01 	sts	0x01C4, r20	; 0x8001c4 <pstrDio_pinsConfig>
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <u8_Dio_Status>
 776:	08 95       	ret
 778:	85 e0       	ldi	r24, 0x05	; 5
 77a:	08 95       	ret
 77c:	83 e0       	ldi	r24, 0x03	; 3
 77e:	08 95       	ret
 780:	84 e0       	ldi	r24, 0x04	; 4
 782:	08 95       	ret

00000784 <Dio_writePin>:
 784:	8f 30       	cpi	r24, 0x0F	; 15
 786:	08 f0       	brcs	.+2      	; 0x78a <Dio_writePin+0x6>
 788:	90 c0       	rjmp	.+288    	; 0x8aa <__stack+0x4b>
 78a:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <u8_Dio_Status>
 78e:	99 23       	and	r25, r25
 790:	09 f4       	brne	.+2      	; 0x794 <Dio_writePin+0x10>
 792:	8d c0       	rjmp	.+282    	; 0x8ae <__stack+0x4f>
 794:	e8 2f       	mov	r30, r24
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	cf 01       	movw	r24, r30
 79a:	88 0f       	add	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	88 0f       	add	r24, r24
 7a0:	99 1f       	adc	r25, r25
 7a2:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <pstrDio_pinsConfig>
 7a6:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <pstrDio_pinsConfig+0x1>
 7aa:	e8 0f       	add	r30, r24
 7ac:	f9 1f       	adc	r31, r25
 7ae:	80 81       	ld	r24, Z
 7b0:	81 30       	cpi	r24, 0x01	; 1
 7b2:	21 f1       	breq	.+72     	; 0x7fc <Dio_writePin+0x78>
 7b4:	30 f0       	brcs	.+12     	; 0x7c2 <Dio_writePin+0x3e>
 7b6:	82 30       	cpi	r24, 0x02	; 2
 7b8:	f1 f1       	breq	.+124    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 7ba:	83 30       	cpi	r24, 0x03	; 3
 7bc:	09 f4       	brne	.+2      	; 0x7c0 <Dio_writePin+0x3c>
 7be:	58 c0       	rjmp	.+176    	; 0x870 <__stack+0x11>
 7c0:	78 c0       	rjmp	.+240    	; 0x8b2 <__stack+0x53>
 7c2:	61 30       	cpi	r22, 0x01	; 1
 7c4:	69 f4       	brne	.+26     	; 0x7e0 <Dio_writePin+0x5c>
 7c6:	2b b3       	in	r18, 0x1b	; 27
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	01 80       	ldd	r0, Z+1	; 0x01
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <Dio_writePin+0x50>
 7d0:	88 0f       	add	r24, r24
 7d2:	99 1f       	adc	r25, r25
 7d4:	0a 94       	dec	r0
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <Dio_writePin+0x4c>
 7d8:	82 2b       	or	r24, r18
 7da:	8b bb       	out	0x1b, r24	; 27
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	08 95       	ret
 7e0:	2b b3       	in	r18, 0x1b	; 27
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	01 80       	ldd	r0, Z+1	; 0x01
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <Dio_writePin+0x6a>
 7ea:	88 0f       	add	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	0a 94       	dec	r0
 7f0:	e2 f7       	brpl	.-8      	; 0x7ea <Dio_writePin+0x66>
 7f2:	80 95       	com	r24
 7f4:	82 23       	and	r24, r18
 7f6:	8b bb       	out	0x1b, r24	; 27
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	08 95       	ret
 7fc:	61 30       	cpi	r22, 0x01	; 1
 7fe:	69 f4       	brne	.+26     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 800:	28 b3       	in	r18, 0x18	; 24
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	01 80       	ldd	r0, Z+1	; 0x01
 808:	02 c0       	rjmp	.+4      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80a:	88 0f       	add	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	0a 94       	dec	r0
 810:	e2 f7       	brpl	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 812:	82 2b       	or	r24, r18
 814:	88 bb       	out	0x18, r24	; 24
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	08 95       	ret
 81a:	28 b3       	in	r18, 0x18	; 24
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	01 80       	ldd	r0, Z+1	; 0x01
 822:	02 c0       	rjmp	.+4      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 824:	88 0f       	add	r24, r24
 826:	99 1f       	adc	r25, r25
 828:	0a 94       	dec	r0
 82a:	e2 f7       	brpl	.-8      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 82c:	80 95       	com	r24
 82e:	82 23       	and	r24, r18
 830:	88 bb       	out	0x18, r24	; 24
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	08 95       	ret
 836:	61 30       	cpi	r22, 0x01	; 1
 838:	69 f4       	brne	.+26     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 83a:	25 b3       	in	r18, 0x15	; 21
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	01 80       	ldd	r0, Z+1	; 0x01
 842:	02 c0       	rjmp	.+4      	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 844:	88 0f       	add	r24, r24
 846:	99 1f       	adc	r25, r25
 848:	0a 94       	dec	r0
 84a:	e2 f7       	brpl	.-8      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 84c:	82 2b       	or	r24, r18
 84e:	85 bb       	out	0x15, r24	; 21
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	08 95       	ret
 854:	25 b3       	in	r18, 0x15	; 21
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	01 80       	ldd	r0, Z+1	; 0x01
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__stack+0x3>
 85e:	88 0f       	add	r24, r24
 860:	99 1f       	adc	r25, r25
 862:	0a 94       	dec	r0
 864:	e2 f7       	brpl	.-8      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 866:	80 95       	com	r24
 868:	82 23       	and	r24, r18
 86a:	85 bb       	out	0x15, r24	; 21
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	08 95       	ret
 870:	61 30       	cpi	r22, 0x01	; 1
 872:	69 f4       	brne	.+26     	; 0x88e <__stack+0x2f>
 874:	22 b3       	in	r18, 0x12	; 18
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	01 80       	ldd	r0, Z+1	; 0x01
 87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
 87e:	88 0f       	add	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	0a 94       	dec	r0
 884:	e2 f7       	brpl	.-8      	; 0x87e <__stack+0x1f>
 886:	82 2b       	or	r24, r18
 888:	82 bb       	out	0x12, r24	; 18
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	08 95       	ret
 88e:	22 b3       	in	r18, 0x12	; 18
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	01 80       	ldd	r0, Z+1	; 0x01
 896:	02 c0       	rjmp	.+4      	; 0x89c <__stack+0x3d>
 898:	88 0f       	add	r24, r24
 89a:	99 1f       	adc	r25, r25
 89c:	0a 94       	dec	r0
 89e:	e2 f7       	brpl	.-8      	; 0x898 <__stack+0x39>
 8a0:	80 95       	com	r24
 8a2:	82 23       	and	r24, r18
 8a4:	82 bb       	out	0x12, r24	; 18
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	08 95       	ret
 8aa:	82 e0       	ldi	r24, 0x02	; 2
 8ac:	08 95       	ret
 8ae:	86 e0       	ldi	r24, 0x06	; 6
 8b0:	08 95       	ret
 8b2:	84 e0       	ldi	r24, 0x04	; 4
 8b4:	08 95       	ret

000008b6 <Dio_readPin>:
* Description: Function to Write data on a Pin.
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
 8b6:	8f 30       	cpi	r24, 0x0F	; 15
 8b8:	08 f0       	brcs	.+2      	; 0x8bc <Dio_readPin+0x6>
 8ba:	7c c0       	rjmp	.+248    	; 0x9b4 <Dio_readPin+0xfe>
	{
		return DIO_STATUS_PIN_ID_INVALID;
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
 8bc:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <u8_Dio_Status>
 8c0:	99 23       	and	r25, r25
 8c2:	09 f4       	brne	.+2      	; 0x8c6 <Dio_readPin+0x10>
 8c4:	79 c0       	rjmp	.+242    	; 0x9b8 <Dio_readPin+0x102>
	{
		return DIO_STATUS_NOT_INIT;
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
 8c6:	e8 2f       	mov	r30, r24
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	cf 01       	movw	r24, r30
 8cc:	88 0f       	add	r24, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	88 0f       	add	r24, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <pstrDio_pinsConfig>
 8d8:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <pstrDio_pinsConfig+0x1>
 8dc:	e8 0f       	add	r30, r24
 8de:	f9 1f       	adc	r31, r25
 8e0:	80 81       	ld	r24, Z
 8e2:	81 30       	cpi	r24, 0x01	; 1
 8e4:	f9 f0       	breq	.+62     	; 0x924 <Dio_readPin+0x6e>
 8e6:	30 f0       	brcs	.+12     	; 0x8f4 <Dio_readPin+0x3e>
 8e8:	82 30       	cpi	r24, 0x02	; 2
 8ea:	a1 f1       	breq	.+104    	; 0x954 <Dio_readPin+0x9e>
 8ec:	83 30       	cpi	r24, 0x03	; 3
 8ee:	09 f4       	brne	.+2      	; 0x8f2 <Dio_readPin+0x3c>
 8f0:	49 c0       	rjmp	.+146    	; 0x984 <Dio_readPin+0xce>
 8f2:	64 c0       	rjmp	.+200    	; 0x9bc <Dio_readPin+0x106>
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
 8f4:	49 b3       	in	r20, 0x19	; 25
 8f6:	51 81       	ldd	r21, Z+1	; 0x01
 8f8:	81 e0       	ldi	r24, 0x01	; 1
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	9c 01       	movw	r18, r24
 8fe:	05 2e       	mov	r0, r21
 900:	02 c0       	rjmp	.+4      	; 0x906 <Dio_readPin+0x50>
 902:	22 0f       	add	r18, r18
 904:	33 1f       	adc	r19, r19
 906:	0a 94       	dec	r0
 908:	e2 f7       	brpl	.-8      	; 0x902 <Dio_readPin+0x4c>
 90a:	84 2f       	mov	r24, r20
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	82 23       	and	r24, r18
 910:	93 23       	and	r25, r19
 912:	02 c0       	rjmp	.+4      	; 0x918 <Dio_readPin+0x62>
 914:	95 95       	asr	r25
 916:	87 95       	ror	r24
 918:	5a 95       	dec	r21
 91a:	e2 f7       	brpl	.-8      	; 0x914 <Dio_readPin+0x5e>
 91c:	fb 01       	movw	r30, r22
 91e:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
 920:	81 e0       	ldi	r24, 0x01	; 1
	}
	switch (pstrDio_pinsConfig[u8_pinID].u8_PortNum)
	{
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
 922:	08 95       	ret
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
 924:	46 b3       	in	r20, 0x16	; 22
 926:	51 81       	ldd	r21, Z+1	; 0x01
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	9c 01       	movw	r18, r24
 92e:	05 2e       	mov	r0, r21
 930:	02 c0       	rjmp	.+4      	; 0x936 <Dio_readPin+0x80>
 932:	22 0f       	add	r18, r18
 934:	33 1f       	adc	r19, r19
 936:	0a 94       	dec	r0
 938:	e2 f7       	brpl	.-8      	; 0x932 <Dio_readPin+0x7c>
 93a:	84 2f       	mov	r24, r20
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	82 23       	and	r24, r18
 940:	93 23       	and	r25, r19
 942:	02 c0       	rjmp	.+4      	; 0x948 <Dio_readPin+0x92>
 944:	95 95       	asr	r25
 946:	87 95       	ror	r24
 948:	5a 95       	dec	r21
 94a:	e2 f7       	brpl	.-8      	; 0x944 <Dio_readPin+0x8e>
 94c:	fb 01       	movw	r30, r22
 94e:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
 950:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_A:
		*pu8_pinValue = (DIO_PORTA_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
 952:	08 95       	ret
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
 954:	43 b3       	in	r20, 0x13	; 19
 956:	51 81       	ldd	r21, Z+1	; 0x01
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	9c 01       	movw	r18, r24
 95e:	05 2e       	mov	r0, r21
 960:	02 c0       	rjmp	.+4      	; 0x966 <Dio_readPin+0xb0>
 962:	22 0f       	add	r18, r18
 964:	33 1f       	adc	r19, r19
 966:	0a 94       	dec	r0
 968:	e2 f7       	brpl	.-8      	; 0x962 <Dio_readPin+0xac>
 96a:	84 2f       	mov	r24, r20
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	82 23       	and	r24, r18
 970:	93 23       	and	r25, r19
 972:	02 c0       	rjmp	.+4      	; 0x978 <Dio_readPin+0xc2>
 974:	95 95       	asr	r25
 976:	87 95       	ror	r24
 978:	5a 95       	dec	r21
 97a:	e2 f7       	brpl	.-8      	; 0x974 <Dio_readPin+0xbe>
 97c:	fb 01       	movw	r30, r22
 97e:	80 83       	st	Z, r24
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
 980:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_B:
		*pu8_pinValue = (DIO_PORTB_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
 982:	08 95       	ret
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
 984:	40 b3       	in	r20, 0x10	; 16
 986:	51 81       	ldd	r21, Z+1	; 0x01
 988:	81 e0       	ldi	r24, 0x01	; 1
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	9c 01       	movw	r18, r24
 98e:	05 2e       	mov	r0, r21
 990:	02 c0       	rjmp	.+4      	; 0x996 <Dio_readPin+0xe0>
 992:	22 0f       	add	r18, r18
 994:	33 1f       	adc	r19, r19
 996:	0a 94       	dec	r0
 998:	e2 f7       	brpl	.-8      	; 0x992 <Dio_readPin+0xdc>
 99a:	84 2f       	mov	r24, r20
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	82 23       	and	r24, r18
 9a0:	93 23       	and	r25, r19
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <Dio_readPin+0xf2>
 9a4:	95 95       	asr	r25
 9a6:	87 95       	ror	r24
 9a8:	5a 95       	dec	r21
 9aa:	e2 f7       	brpl	.-8      	; 0x9a4 <Dio_readPin+0xee>
 9ac:	fb 01       	movw	r30, r22
 9ae:	80 83       	st	Z, r24
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
	}
	return DIO_STATUS_ERROR_OK;
 9b0:	81 e0       	ldi	r24, 0x01	; 1
		case PORT_C:
		*pu8_pinValue = (DIO_PORTC_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
 9b2:	08 95       	ret
enuDio_Status_t Dio_readPin(uint8_t u8_pinID, uint8_t *pu8_pinValue)
{
	/*-* Check if the pinID is out of configured range *-*/
	if(u8_pinID > DIO_USED_PINS_NUM)
	{
		return DIO_STATUS_PIN_ID_INVALID;
 9b4:	82 e0       	ldi	r24, 0x02	; 2
 9b6:	08 95       	ret
	}
	/*-* Check if the module is not initialized *-*/
	if(u8_Dio_Status == DIO_NOT_INITIALIZED)
	{
		return DIO_STATUS_NOT_INIT;
 9b8:	86 e0       	ldi	r24, 0x06	; 6
 9ba:	08 95       	ret
		break;
		case PORT_D:
		*pu8_pinValue = (DIO_PORTD_PIN & (1<<(pstrDio_pinsConfig[u8_pinID].u8_PinNum))) >> (pstrDio_pinsConfig[u8_pinID].u8_PinNum);
		break;
		default:
		return DIO_STATUS_PORT_NUM_INVALID;
 9bc:	84 e0       	ldi	r24, 0x04	; 4
	}
	return DIO_STATUS_ERROR_OK;
 9be:	08 95       	ret

000009c0 <Gpt_ISRHandler>:
		default:
		return GPT_STATUS_ERROR_INVALID_TIMER_NUM;
	}
	enuChannelsState[ChannelId] = GPT_STOPPED;
	return GPT_STATUS_ERROR_OK;
}
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	0e c0       	rjmp	.+28     	; 0x9e0 <Gpt_ISRHandler+0x20>
 9c4:	29 2f       	mov	r18, r25
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	f9 01       	movw	r30, r18
 9ca:	ee 0f       	add	r30, r30
 9cc:	ff 1f       	adc	r31, r31
 9ce:	2e 0f       	add	r18, r30
 9d0:	3f 1f       	adc	r19, r31
 9d2:	f9 01       	movw	r30, r18
 9d4:	e2 54       	subi	r30, 0x42	; 66
 9d6:	ff 4f       	sbci	r31, 0xFF	; 255
 9d8:	20 81       	ld	r18, Z
 9da:	28 17       	cp	r18, r24
 9dc:	19 f0       	breq	.+6      	; 0x9e4 <Gpt_ISRHandler+0x24>
 9de:	9f 5f       	subi	r25, 0xFF	; 255
 9e0:	99 23       	and	r25, r25
 9e2:	81 f3       	breq	.-32     	; 0x9c4 <Gpt_ISRHandler+0x4>
 9e4:	89 2f       	mov	r24, r25
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	fc 01       	movw	r30, r24
 9ea:	ee 0f       	add	r30, r30
 9ec:	ff 1f       	adc	r31, r31
 9ee:	ee 0f       	add	r30, r30
 9f0:	ff 1f       	adc	r31, r31
 9f2:	ea 53       	subi	r30, 0x3A	; 58
 9f4:	fe 4f       	sbci	r31, 0xFE	; 254
 9f6:	40 81       	ld	r20, Z
 9f8:	51 81       	ldd	r21, Z+1	; 0x01
 9fa:	62 81       	ldd	r22, Z+2	; 0x02
 9fc:	73 81       	ldd	r23, Z+3	; 0x03
 9fe:	41 15       	cp	r20, r1
 a00:	51 05       	cpc	r21, r1
 a02:	61 05       	cpc	r22, r1
 a04:	71 05       	cpc	r23, r1
 a06:	81 f0       	breq	.+32     	; 0xa28 <Gpt_ISRHandler+0x68>
 a08:	88 0f       	add	r24, r24
 a0a:	99 1f       	adc	r25, r25
 a0c:	88 0f       	add	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	fc 01       	movw	r30, r24
 a12:	ea 53       	subi	r30, 0x3A	; 58
 a14:	fe 4f       	sbci	r31, 0xFE	; 254
 a16:	41 50       	subi	r20, 0x01	; 1
 a18:	51 09       	sbc	r21, r1
 a1a:	61 09       	sbc	r22, r1
 a1c:	71 09       	sbc	r23, r1
 a1e:	40 83       	st	Z, r20
 a20:	51 83       	std	Z+1, r21	; 0x01
 a22:	62 83       	std	Z+2, r22	; 0x02
 a24:	73 83       	std	Z+3, r23	; 0x03
 a26:	08 95       	ret
 a28:	23 b7       	in	r18, 0x33	; 51
 a2a:	2e 7f       	andi	r18, 0xFE	; 254
 a2c:	23 bf       	out	0x33, r18	; 51
 a2e:	23 b7       	in	r18, 0x33	; 51
 a30:	2d 7f       	andi	r18, 0xFD	; 253
 a32:	23 bf       	out	0x33, r18	; 51
 a34:	23 b7       	in	r18, 0x33	; 51
 a36:	2b 7f       	andi	r18, 0xFB	; 251
 a38:	23 bf       	out	0x33, r18	; 51
 a3a:	29 b7       	in	r18, 0x39	; 57
 a3c:	2e 7f       	andi	r18, 0xFE	; 254
 a3e:	29 bf       	out	0x39, r18	; 57
 a40:	fc 01       	movw	r30, r24
 a42:	e6 53       	subi	r30, 0x36	; 54
 a44:	fe 4f       	sbci	r31, 0xFE	; 254
 a46:	24 e0       	ldi	r18, 0x04	; 4
 a48:	20 83       	st	Z, r18
 a4a:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <Gpt_Timer0_CallBackPtr>
 a4e:	f0 91 cc 01 	lds	r31, 0x01CC	; 0x8001cc <Gpt_Timer0_CallBackPtr+0x1>
 a52:	09 95       	icall
 a54:	08 95       	ret

00000a56 <__vector_11>:
	enuChannelsState[u8_loopIndex] = GPT_EXPIRED;
	/* CallBack the notification function */
	(*Gpt_Timer0_CallBackPtr)();
}

ISR(TIMER0_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
 a56:	1f 92       	push	r1
 a58:	0f 92       	push	r0
 a5a:	0f b6       	in	r0, 0x3f	; 63
 a5c:	0f 92       	push	r0
 a5e:	11 24       	eor	r1, r1
 a60:	2f 93       	push	r18
 a62:	3f 93       	push	r19
 a64:	4f 93       	push	r20
 a66:	5f 93       	push	r21
 a68:	6f 93       	push	r22
 a6a:	7f 93       	push	r23
 a6c:	8f 93       	push	r24
 a6e:	9f 93       	push	r25
 a70:	af 93       	push	r26
 a72:	bf 93       	push	r27
 a74:	ef 93       	push	r30
 a76:	ff 93       	push	r31
 a78:	80 e0       	ldi	r24, 0x00	; 0
 a7a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <Gpt_ISRHandler>
 a7e:	ff 91       	pop	r31
 a80:	ef 91       	pop	r30
 a82:	bf 91       	pop	r27
 a84:	af 91       	pop	r26
 a86:	9f 91       	pop	r25
 a88:	8f 91       	pop	r24
 a8a:	7f 91       	pop	r23
 a8c:	6f 91       	pop	r22
 a8e:	5f 91       	pop	r21
 a90:	4f 91       	pop	r20
 a92:	3f 91       	pop	r19
 a94:	2f 91       	pop	r18
 a96:	0f 90       	pop	r0
 a98:	0f be       	out	0x3f, r0	; 63
 a9a:	0f 90       	pop	r0
 a9c:	1f 90       	pop	r1
 a9e:	18 95       	reti

00000aa0 <__vector_10>:
ISR(TIMER0_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_0);}
 aa0:	1f 92       	push	r1
 aa2:	0f 92       	push	r0
 aa4:	0f b6       	in	r0, 0x3f	; 63
 aa6:	0f 92       	push	r0
 aa8:	11 24       	eor	r1, r1
 aaa:	2f 93       	push	r18
 aac:	3f 93       	push	r19
 aae:	4f 93       	push	r20
 ab0:	5f 93       	push	r21
 ab2:	6f 93       	push	r22
 ab4:	7f 93       	push	r23
 ab6:	8f 93       	push	r24
 ab8:	9f 93       	push	r25
 aba:	af 93       	push	r26
 abc:	bf 93       	push	r27
 abe:	ef 93       	push	r30
 ac0:	ff 93       	push	r31
 ac2:	80 e0       	ldi	r24, 0x00	; 0
 ac4:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <Gpt_ISRHandler>
 ac8:	ff 91       	pop	r31
 aca:	ef 91       	pop	r30
 acc:	bf 91       	pop	r27
 ace:	af 91       	pop	r26
 ad0:	9f 91       	pop	r25
 ad2:	8f 91       	pop	r24
 ad4:	7f 91       	pop	r23
 ad6:	6f 91       	pop	r22
 ad8:	5f 91       	pop	r21
 ada:	4f 91       	pop	r20
 adc:	3f 91       	pop	r19
 ade:	2f 91       	pop	r18
 ae0:	0f 90       	pop	r0
 ae2:	0f be       	out	0x3f, r0	; 63
 ae4:	0f 90       	pop	r0
 ae6:	1f 90       	pop	r1
 ae8:	18 95       	reti

00000aea <__vector_9>:
ISR(TIMER1_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
 aea:	1f 92       	push	r1
 aec:	0f 92       	push	r0
 aee:	0f b6       	in	r0, 0x3f	; 63
 af0:	0f 92       	push	r0
 af2:	11 24       	eor	r1, r1
 af4:	2f 93       	push	r18
 af6:	3f 93       	push	r19
 af8:	4f 93       	push	r20
 afa:	5f 93       	push	r21
 afc:	6f 93       	push	r22
 afe:	7f 93       	push	r23
 b00:	8f 93       	push	r24
 b02:	9f 93       	push	r25
 b04:	af 93       	push	r26
 b06:	bf 93       	push	r27
 b08:	ef 93       	push	r30
 b0a:	ff 93       	push	r31
 b0c:	81 e0       	ldi	r24, 0x01	; 1
 b0e:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <Gpt_ISRHandler>
 b12:	ff 91       	pop	r31
 b14:	ef 91       	pop	r30
 b16:	bf 91       	pop	r27
 b18:	af 91       	pop	r26
 b1a:	9f 91       	pop	r25
 b1c:	8f 91       	pop	r24
 b1e:	7f 91       	pop	r23
 b20:	6f 91       	pop	r22
 b22:	5f 91       	pop	r21
 b24:	4f 91       	pop	r20
 b26:	3f 91       	pop	r19
 b28:	2f 91       	pop	r18
 b2a:	0f 90       	pop	r0
 b2c:	0f be       	out	0x3f, r0	; 63
 b2e:	0f 90       	pop	r0
 b30:	1f 90       	pop	r1
 b32:	18 95       	reti

00000b34 <__vector_6>:
ISR(TIMER1_CAPT_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
 b34:	1f 92       	push	r1
 b36:	0f 92       	push	r0
 b38:	0f b6       	in	r0, 0x3f	; 63
 b3a:	0f 92       	push	r0
 b3c:	11 24       	eor	r1, r1
 b3e:	2f 93       	push	r18
 b40:	3f 93       	push	r19
 b42:	4f 93       	push	r20
 b44:	5f 93       	push	r21
 b46:	6f 93       	push	r22
 b48:	7f 93       	push	r23
 b4a:	8f 93       	push	r24
 b4c:	9f 93       	push	r25
 b4e:	af 93       	push	r26
 b50:	bf 93       	push	r27
 b52:	ef 93       	push	r30
 b54:	ff 93       	push	r31
 b56:	81 e0       	ldi	r24, 0x01	; 1
 b58:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <Gpt_ISRHandler>
 b5c:	ff 91       	pop	r31
 b5e:	ef 91       	pop	r30
 b60:	bf 91       	pop	r27
 b62:	af 91       	pop	r26
 b64:	9f 91       	pop	r25
 b66:	8f 91       	pop	r24
 b68:	7f 91       	pop	r23
 b6a:	6f 91       	pop	r22
 b6c:	5f 91       	pop	r21
 b6e:	4f 91       	pop	r20
 b70:	3f 91       	pop	r19
 b72:	2f 91       	pop	r18
 b74:	0f 90       	pop	r0
 b76:	0f be       	out	0x3f, r0	; 63
 b78:	0f 90       	pop	r0
 b7a:	1f 90       	pop	r1
 b7c:	18 95       	reti

00000b7e <__vector_7>:
ISR(TIMER1_COMPA_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
 b7e:	1f 92       	push	r1
 b80:	0f 92       	push	r0
 b82:	0f b6       	in	r0, 0x3f	; 63
 b84:	0f 92       	push	r0
 b86:	11 24       	eor	r1, r1
 b88:	2f 93       	push	r18
 b8a:	3f 93       	push	r19
 b8c:	4f 93       	push	r20
 b8e:	5f 93       	push	r21
 b90:	6f 93       	push	r22
 b92:	7f 93       	push	r23
 b94:	8f 93       	push	r24
 b96:	9f 93       	push	r25
 b98:	af 93       	push	r26
 b9a:	bf 93       	push	r27
 b9c:	ef 93       	push	r30
 b9e:	ff 93       	push	r31
 ba0:	81 e0       	ldi	r24, 0x01	; 1
 ba2:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <Gpt_ISRHandler>
 ba6:	ff 91       	pop	r31
 ba8:	ef 91       	pop	r30
 baa:	bf 91       	pop	r27
 bac:	af 91       	pop	r26
 bae:	9f 91       	pop	r25
 bb0:	8f 91       	pop	r24
 bb2:	7f 91       	pop	r23
 bb4:	6f 91       	pop	r22
 bb6:	5f 91       	pop	r21
 bb8:	4f 91       	pop	r20
 bba:	3f 91       	pop	r19
 bbc:	2f 91       	pop	r18
 bbe:	0f 90       	pop	r0
 bc0:	0f be       	out	0x3f, r0	; 63
 bc2:	0f 90       	pop	r0
 bc4:	1f 90       	pop	r1
 bc6:	18 95       	reti

00000bc8 <__vector_8>:
ISR(TIMER1_COMPB_IRQ){Gpt_ISRHandler(GPT_TIMER_1);}
 bc8:	1f 92       	push	r1
 bca:	0f 92       	push	r0
 bcc:	0f b6       	in	r0, 0x3f	; 63
 bce:	0f 92       	push	r0
 bd0:	11 24       	eor	r1, r1
 bd2:	2f 93       	push	r18
 bd4:	3f 93       	push	r19
 bd6:	4f 93       	push	r20
 bd8:	5f 93       	push	r21
 bda:	6f 93       	push	r22
 bdc:	7f 93       	push	r23
 bde:	8f 93       	push	r24
 be0:	9f 93       	push	r25
 be2:	af 93       	push	r26
 be4:	bf 93       	push	r27
 be6:	ef 93       	push	r30
 be8:	ff 93       	push	r31
 bea:	81 e0       	ldi	r24, 0x01	; 1
 bec:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <Gpt_ISRHandler>
 bf0:	ff 91       	pop	r31
 bf2:	ef 91       	pop	r30
 bf4:	bf 91       	pop	r27
 bf6:	af 91       	pop	r26
 bf8:	9f 91       	pop	r25
 bfa:	8f 91       	pop	r24
 bfc:	7f 91       	pop	r23
 bfe:	6f 91       	pop	r22
 c00:	5f 91       	pop	r21
 c02:	4f 91       	pop	r20
 c04:	3f 91       	pop	r19
 c06:	2f 91       	pop	r18
 c08:	0f 90       	pop	r0
 c0a:	0f be       	out	0x3f, r0	; 63
 c0c:	0f 90       	pop	r0
 c0e:	1f 90       	pop	r1
 c10:	18 95       	reti

00000c12 <__vector_4>:
ISR(TIMER2_COMP_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
 c12:	1f 92       	push	r1
 c14:	0f 92       	push	r0
 c16:	0f b6       	in	r0, 0x3f	; 63
 c18:	0f 92       	push	r0
 c1a:	11 24       	eor	r1, r1
 c1c:	2f 93       	push	r18
 c1e:	3f 93       	push	r19
 c20:	4f 93       	push	r20
 c22:	5f 93       	push	r21
 c24:	6f 93       	push	r22
 c26:	7f 93       	push	r23
 c28:	8f 93       	push	r24
 c2a:	9f 93       	push	r25
 c2c:	af 93       	push	r26
 c2e:	bf 93       	push	r27
 c30:	ef 93       	push	r30
 c32:	ff 93       	push	r31
 c34:	82 e0       	ldi	r24, 0x02	; 2
 c36:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <Gpt_ISRHandler>
 c3a:	ff 91       	pop	r31
 c3c:	ef 91       	pop	r30
 c3e:	bf 91       	pop	r27
 c40:	af 91       	pop	r26
 c42:	9f 91       	pop	r25
 c44:	8f 91       	pop	r24
 c46:	7f 91       	pop	r23
 c48:	6f 91       	pop	r22
 c4a:	5f 91       	pop	r21
 c4c:	4f 91       	pop	r20
 c4e:	3f 91       	pop	r19
 c50:	2f 91       	pop	r18
 c52:	0f 90       	pop	r0
 c54:	0f be       	out	0x3f, r0	; 63
 c56:	0f 90       	pop	r0
 c58:	1f 90       	pop	r1
 c5a:	18 95       	reti

00000c5c <__vector_5>:
ISR(TIMER2_OVF_IRQ){Gpt_ISRHandler(GPT_TIMER_2);}
 c5c:	1f 92       	push	r1
 c5e:	0f 92       	push	r0
 c60:	0f b6       	in	r0, 0x3f	; 63
 c62:	0f 92       	push	r0
 c64:	11 24       	eor	r1, r1
 c66:	2f 93       	push	r18
 c68:	3f 93       	push	r19
 c6a:	4f 93       	push	r20
 c6c:	5f 93       	push	r21
 c6e:	6f 93       	push	r22
 c70:	7f 93       	push	r23
 c72:	8f 93       	push	r24
 c74:	9f 93       	push	r25
 c76:	af 93       	push	r26
 c78:	bf 93       	push	r27
 c7a:	ef 93       	push	r30
 c7c:	ff 93       	push	r31
 c7e:	82 e0       	ldi	r24, 0x02	; 2
 c80:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <Gpt_ISRHandler>
 c84:	ff 91       	pop	r31
 c86:	ef 91       	pop	r30
 c88:	bf 91       	pop	r27
 c8a:	af 91       	pop	r26
 c8c:	9f 91       	pop	r25
 c8e:	8f 91       	pop	r24
 c90:	7f 91       	pop	r23
 c92:	6f 91       	pop	r22
 c94:	5f 91       	pop	r21
 c96:	4f 91       	pop	r20
 c98:	3f 91       	pop	r19
 c9a:	2f 91       	pop	r18
 c9c:	0f 90       	pop	r0
 c9e:	0f be       	out	0x3f, r0	; 63
 ca0:	0f 90       	pop	r0
 ca2:	1f 90       	pop	r1
 ca4:	18 95       	reti

00000ca6 <__vector_12>:
{
	return SPI_SPDR_REG;
}


 ca6:	1f 92       	push	r1
 ca8:	0f 92       	push	r0
 caa:	0f b6       	in	r0, 0x3f	; 63
 cac:	0f 92       	push	r0
 cae:	11 24       	eor	r1, r1
 cb0:	2f 93       	push	r18
 cb2:	3f 93       	push	r19
 cb4:	4f 93       	push	r20
 cb6:	5f 93       	push	r21
 cb8:	6f 93       	push	r22
 cba:	7f 93       	push	r23
 cbc:	8f 93       	push	r24
 cbe:	9f 93       	push	r25
 cc0:	af 93       	push	r26
 cc2:	bf 93       	push	r27
 cc4:	ef 93       	push	r30
 cc6:	ff 93       	push	r31
 cc8:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <SPI_STC_CallBackPtr>
 ccc:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <SPI_STC_CallBackPtr+0x1>
 cd0:	09 95       	icall
 cd2:	ff 91       	pop	r31
 cd4:	ef 91       	pop	r30
 cd6:	bf 91       	pop	r27
 cd8:	af 91       	pop	r26
 cda:	9f 91       	pop	r25
 cdc:	8f 91       	pop	r24
 cde:	7f 91       	pop	r23
 ce0:	6f 91       	pop	r22
 ce2:	5f 91       	pop	r21
 ce4:	4f 91       	pop	r20
 ce6:	3f 91       	pop	r19
 ce8:	2f 91       	pop	r18
 cea:	0f 90       	pop	r0
 cec:	0f be       	out	0x3f, r0	; 63
 cee:	0f 90       	pop	r0
 cf0:	1f 90       	pop	r1
 cf2:	18 95       	reti

00000cf4 <Uart_init>:
/**************************************************************************************/
	/*- Enable the Uart UDRE Interrupt -*/
	UART_UCSRB_REG &= ~(u8_InterruptFlags);
			
	return UART_STATUS_ERROR_OK;
}
 cf4:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <u8_Uart_Status>
 cf8:	81 30       	cpi	r24, 0x01	; 1
 cfa:	81 f0       	breq	.+32     	; 0xd1c <Uart_init+0x28>
 cfc:	10 bc       	out	0x20, r1	; 32
 cfe:	8c e0       	ldi	r24, 0x0C	; 12
 d00:	89 b9       	out	0x09, r24	; 9
 d02:	82 e0       	ldi	r24, 0x02	; 2
 d04:	8b b9       	out	0x0b, r24	; 11
 d06:	88 e1       	ldi	r24, 0x18	; 24
 d08:	8a b9       	out	0x0a, r24	; 10
 d0a:	80 e8       	ldi	r24, 0x80	; 128
 d0c:	80 bd       	out	0x20, r24	; 32
 d0e:	80 b5       	in	r24, 0x20	; 32
 d10:	86 68       	ori	r24, 0x86	; 134
 d12:	80 bd       	out	0x20, r24	; 32
 d14:	81 e0       	ldi	r24, 0x01	; 1
 d16:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <u8_Uart_Status>
 d1a:	08 95       	ret
 d1c:	87 e0       	ldi	r24, 0x07	; 7
 d1e:	08 95       	ret

00000d20 <Uart_sendByte>:
 d20:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <u8_Uart_Status>
 d24:	99 23       	and	r25, r25
 d26:	29 f0       	breq	.+10     	; 0xd32 <Uart_sendByte+0x12>
 d28:	5d 9b       	sbis	0x0b, 5	; 11
 d2a:	fe cf       	rjmp	.-4      	; 0xd28 <Uart_sendByte+0x8>
 d2c:	8c b9       	out	0x0c, r24	; 12
 d2e:	81 e0       	ldi	r24, 0x01	; 1
 d30:	08 95       	ret
 d32:	86 e0       	ldi	r24, 0x06	; 6
 d34:	08 95       	ret

00000d36 <Uart_sendPacket>:
 d36:	ef 92       	push	r14
 d38:	ff 92       	push	r15
 d3a:	0f 93       	push	r16
 d3c:	1f 93       	push	r17
 d3e:	cf 93       	push	r28
 d40:	df 93       	push	r29
 d42:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <u8_Uart_Status>
 d46:	22 23       	and	r18, r18
 d48:	99 f0       	breq	.+38     	; 0xd70 <Uart_sendPacket+0x3a>
 d4a:	8b 01       	movw	r16, r22
 d4c:	7c 01       	movw	r14, r24
 d4e:	c0 e0       	ldi	r28, 0x00	; 0
 d50:	d0 e0       	ldi	r29, 0x00	; 0
 d52:	09 c0       	rjmp	.+18     	; 0xd66 <Uart_sendPacket+0x30>
 d54:	f7 01       	movw	r30, r14
 d56:	ec 0f       	add	r30, r28
 d58:	fd 1f       	adc	r31, r29
 d5a:	80 81       	ld	r24, Z
 d5c:	0e 94 90 06 	call	0xd20	; 0xd20 <Uart_sendByte>
 d60:	81 30       	cpi	r24, 0x01	; 1
 d62:	41 f4       	brne	.+16     	; 0xd74 <Uart_sendPacket+0x3e>
 d64:	21 96       	adiw	r28, 0x01	; 1
 d66:	c0 17       	cp	r28, r16
 d68:	d1 07       	cpc	r29, r17
 d6a:	a0 f3       	brcs	.-24     	; 0xd54 <Uart_sendPacket+0x1e>
 d6c:	81 e0       	ldi	r24, 0x01	; 1
 d6e:	03 c0       	rjmp	.+6      	; 0xd76 <Uart_sendPacket+0x40>
 d70:	86 e0       	ldi	r24, 0x06	; 6
 d72:	01 c0       	rjmp	.+2      	; 0xd76 <Uart_sendPacket+0x40>
 d74:	80 e0       	ldi	r24, 0x00	; 0
 d76:	df 91       	pop	r29
 d78:	cf 91       	pop	r28
 d7a:	1f 91       	pop	r17
 d7c:	0f 91       	pop	r16
 d7e:	ff 90       	pop	r15
 d80:	ef 90       	pop	r14
 d82:	08 95       	ret

00000d84 <Uart_EnableNotification_RXC>:
 d84:	9c 01       	movw	r18, r24
 d86:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <u8_Uart_Status>
 d8a:	99 23       	and	r25, r25
 d8c:	61 f0       	breq	.+24     	; 0xda6 <Uart_EnableNotification_RXC+0x22>
 d8e:	21 15       	cp	r18, r1
 d90:	31 05       	cpc	r19, r1
 d92:	59 f0       	breq	.+22     	; 0xdaa <Uart_EnableNotification_RXC+0x26>
 d94:	8a b1       	in	r24, 0x0a	; 10
 d96:	80 68       	ori	r24, 0x80	; 128
 d98:	8a b9       	out	0x0a, r24	; 10
 d9a:	30 93 d3 01 	sts	0x01D3, r19	; 0x8001d3 <Uart_RXC_CallBackPtr+0x1>
 d9e:	20 93 d2 01 	sts	0x01D2, r18	; 0x8001d2 <Uart_RXC_CallBackPtr>
 da2:	81 e0       	ldi	r24, 0x01	; 1
 da4:	08 95       	ret
 da6:	86 e0       	ldi	r24, 0x06	; 6
 da8:	08 95       	ret
 daa:	85 e0       	ldi	r24, 0x05	; 5
 dac:	08 95       	ret

00000dae <Uart_DataRegister>:
*				the content of the data registers
* Mainly used by the ISR Callback funtions
*********************************************************/
uint8_t Uart_DataRegister(void)
{
	return UART_UDR_REG;
 dae:	8c b1       	in	r24, 0x0c	; 12
}
 db0:	08 95       	ret

00000db2 <__vector_15>:


ISR(USART_TXC_IRQ){(*Uart_TXC_CallBackPtr)();}
 db2:	1f 92       	push	r1
 db4:	0f 92       	push	r0
 db6:	0f b6       	in	r0, 0x3f	; 63
 db8:	0f 92       	push	r0
 dba:	11 24       	eor	r1, r1
 dbc:	2f 93       	push	r18
 dbe:	3f 93       	push	r19
 dc0:	4f 93       	push	r20
 dc2:	5f 93       	push	r21
 dc4:	6f 93       	push	r22
 dc6:	7f 93       	push	r23
 dc8:	8f 93       	push	r24
 dca:	9f 93       	push	r25
 dcc:	af 93       	push	r26
 dce:	bf 93       	push	r27
 dd0:	ef 93       	push	r30
 dd2:	ff 93       	push	r31
 dd4:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <Uart_TXC_CallBackPtr>
 dd8:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <Uart_TXC_CallBackPtr+0x1>
 ddc:	09 95       	icall
 dde:	ff 91       	pop	r31
 de0:	ef 91       	pop	r30
 de2:	bf 91       	pop	r27
 de4:	af 91       	pop	r26
 de6:	9f 91       	pop	r25
 de8:	8f 91       	pop	r24
 dea:	7f 91       	pop	r23
 dec:	6f 91       	pop	r22
 dee:	5f 91       	pop	r21
 df0:	4f 91       	pop	r20
 df2:	3f 91       	pop	r19
 df4:	2f 91       	pop	r18
 df6:	0f 90       	pop	r0
 df8:	0f be       	out	0x3f, r0	; 63
 dfa:	0f 90       	pop	r0
 dfc:	1f 90       	pop	r1
 dfe:	18 95       	reti

00000e00 <__vector_13>:
ISR(USART_RXC_IRQ){(*Uart_RXC_CallBackPtr)();}
 e00:	1f 92       	push	r1
 e02:	0f 92       	push	r0
 e04:	0f b6       	in	r0, 0x3f	; 63
 e06:	0f 92       	push	r0
 e08:	11 24       	eor	r1, r1
 e0a:	2f 93       	push	r18
 e0c:	3f 93       	push	r19
 e0e:	4f 93       	push	r20
 e10:	5f 93       	push	r21
 e12:	6f 93       	push	r22
 e14:	7f 93       	push	r23
 e16:	8f 93       	push	r24
 e18:	9f 93       	push	r25
 e1a:	af 93       	push	r26
 e1c:	bf 93       	push	r27
 e1e:	ef 93       	push	r30
 e20:	ff 93       	push	r31
 e22:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <Uart_RXC_CallBackPtr>
 e26:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <Uart_RXC_CallBackPtr+0x1>
 e2a:	09 95       	icall
 e2c:	ff 91       	pop	r31
 e2e:	ef 91       	pop	r30
 e30:	bf 91       	pop	r27
 e32:	af 91       	pop	r26
 e34:	9f 91       	pop	r25
 e36:	8f 91       	pop	r24
 e38:	7f 91       	pop	r23
 e3a:	6f 91       	pop	r22
 e3c:	5f 91       	pop	r21
 e3e:	4f 91       	pop	r20
 e40:	3f 91       	pop	r19
 e42:	2f 91       	pop	r18
 e44:	0f 90       	pop	r0
 e46:	0f be       	out	0x3f, r0	; 63
 e48:	0f 90       	pop	r0
 e4a:	1f 90       	pop	r1
 e4c:	18 95       	reti

00000e4e <__vector_14>:
ISR(USART_UDRE_IRQ){(*Uart_UDRE_CallBackPtr)();}
 e4e:	1f 92       	push	r1
 e50:	0f 92       	push	r0
 e52:	0f b6       	in	r0, 0x3f	; 63
 e54:	0f 92       	push	r0
 e56:	11 24       	eor	r1, r1
 e58:	2f 93       	push	r18
 e5a:	3f 93       	push	r19
 e5c:	4f 93       	push	r20
 e5e:	5f 93       	push	r21
 e60:	6f 93       	push	r22
 e62:	7f 93       	push	r23
 e64:	8f 93       	push	r24
 e66:	9f 93       	push	r25
 e68:	af 93       	push	r26
 e6a:	bf 93       	push	r27
 e6c:	ef 93       	push	r30
 e6e:	ff 93       	push	r31
 e70:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <Uart_UDRE_CallBackPtr>
 e74:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <Uart_UDRE_CallBackPtr+0x1>
 e78:	09 95       	icall
 e7a:	ff 91       	pop	r31
 e7c:	ef 91       	pop	r30
 e7e:	bf 91       	pop	r27
 e80:	af 91       	pop	r26
 e82:	9f 91       	pop	r25
 e84:	8f 91       	pop	r24
 e86:	7f 91       	pop	r23
 e88:	6f 91       	pop	r22
 e8a:	5f 91       	pop	r21
 e8c:	4f 91       	pop	r20
 e8e:	3f 91       	pop	r19
 e90:	2f 91       	pop	r18
 e92:	0f 90       	pop	r0
 e94:	0f be       	out	0x3f, r0	; 63
 e96:	0f 90       	pop	r0
 e98:	1f 90       	pop	r1
 e9a:	18 95       	reti

00000e9c <stringLength>:
*                          (-1) returned if the u32_number not found.
* Description: Function to search for u32_number inside the pau32_array and return its index
*              if found, otherwise returns (-1).
* *************************************************************************************/
uint8_t stringLength(uint8_t* string1)
{
 e9c:	ac 01       	movw	r20, r24
    uint8_t u8_loopIndex=0;
 e9e:	80 e0       	ldi	r24, 0x00	; 0
    while(string1[u8_loopIndex] != '\0')
 ea0:	01 c0       	rjmp	.+2      	; 0xea4 <stringLength+0x8>
    {
        u8_loopIndex++;
 ea2:	8f 5f       	subi	r24, 0xFF	; 255
*              if found, otherwise returns (-1).
* *************************************************************************************/
uint8_t stringLength(uint8_t* string1)
{
    uint8_t u8_loopIndex=0;
    while(string1[u8_loopIndex] != '\0')
 ea4:	fa 01       	movw	r30, r20
 ea6:	e8 0f       	add	r30, r24
 ea8:	f1 1d       	adc	r31, r1
 eaa:	20 81       	ld	r18, Z
 eac:	21 11       	cpse	r18, r1
 eae:	f9 cf       	rjmp	.-14     	; 0xea2 <stringLength+0x6>
    {
        u8_loopIndex++;
    }
    return u8_loopIndex+1;
}
 eb0:	8f 5f       	subi	r24, 0xFF	; 255
 eb2:	08 95       	ret

00000eb4 <__adddi3_s8>:
 eb4:	00 24       	eor	r0, r0
 eb6:	a7 fd       	sbrc	r26, 7
 eb8:	00 94       	com	r0
 eba:	2a 0f       	add	r18, r26
 ebc:	30 1d       	adc	r19, r0
 ebe:	40 1d       	adc	r20, r0
 ec0:	50 1d       	adc	r21, r0
 ec2:	60 1d       	adc	r22, r0
 ec4:	70 1d       	adc	r23, r0
 ec6:	80 1d       	adc	r24, r0
 ec8:	90 1d       	adc	r25, r0
 eca:	08 95       	ret

00000ecc <__cmpdi2>:
 ecc:	2a 15       	cp	r18, r10
 ece:	3b 05       	cpc	r19, r11
 ed0:	4c 05       	cpc	r20, r12
 ed2:	5d 05       	cpc	r21, r13
 ed4:	6e 05       	cpc	r22, r14
 ed6:	7f 05       	cpc	r23, r15
 ed8:	80 07       	cpc	r24, r16
 eda:	91 07       	cpc	r25, r17
 edc:	08 95       	ret

00000ede <__cmpdi2_s8>:
 ede:	00 24       	eor	r0, r0
 ee0:	a7 fd       	sbrc	r26, 7
 ee2:	00 94       	com	r0
 ee4:	2a 17       	cp	r18, r26
 ee6:	30 05       	cpc	r19, r0
 ee8:	40 05       	cpc	r20, r0
 eea:	50 05       	cpc	r21, r0
 eec:	60 05       	cpc	r22, r0
 eee:	70 05       	cpc	r23, r0
 ef0:	80 05       	cpc	r24, r0
 ef2:	90 05       	cpc	r25, r0
 ef4:	08 95       	ret

00000ef6 <_exit>:
 ef6:	f8 94       	cli

00000ef8 <__stop_program>:
 ef8:	ff cf       	rjmp	.-2      	; 0xef8 <__stop_program>
